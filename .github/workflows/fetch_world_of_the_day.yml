name: Fetch Word of the Day

# 1. Grant write permissions to the GITHUB_TOKEN
permissions:
  contents: write  # Grants write access to repository contents

on:
  schedule:
    - cron: '0 8 * * *'  # Every day at 08:00 UTC
  workflow_dispatch:      # Allows manual triggering
  push:
    branches:
      - dev
      - main

jobs:
  fetch_word:
    runs-on: ubuntu-24.04
    env:
      DATE: ''
      RAW_DATE: ''
      HOLDING_BRANCH: 'holding'  # Name of the holding branch

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # Ensure credentials are persisted (default is true)

      # Step 2: Ensure the holding branch exists
      - name: Ensure holding branch exists
        run: |
          # Fetch all remote branches
          git fetch origin

          # Check if the holding branch exists
          if ! git ls-remote --heads origin ${{ env.HOLDING_BRANCH }} | grep ${{ env.HOLDING_BRANCH }}; then
            echo "Holding branch does not exist. Creating it."
            # Create the holding branch based on main (or any default branch)
            git checkout -b ${{ env.HOLDING_BRANCH }} origin/main
            git push origin ${{ env.HOLDING_BRANCH }}
          else
            echo "Holding branch exists."
          fi

      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 4: Cache pip packages
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4.5: Print Current Working Directory
      - name: Print Current Working Directory
        run: pwd

      # Step 4.6: List Repository Contents
      - name: List Repository Contents
        run: ls -la

      # Step 4.7: (Optional) Display Contents of requirements.txt
      - name: Display requirements.txt
        if: ${{ always() }}
        run: cat requirements.txt

      # Step 5: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 6: Run scraping script and extract DATE
      - name: Run scraping script
        id: run_scraping
        run: |
          # 1) Run your Python script
          python dicolink/dicolink.py

          # 2) Extract the date in a single line to avoid YAML key errors
          RAW_DATE=$(python -c "import glob, json; \
          files = glob.glob('data/dicolink_word_of_the_day_*.json'); \
          f = files[0] if files else None; \
          print(json.load(open(f, encoding='utf-8'))['date']) if f else print('Unknown Date')")

          # 3) Sanitize the DATE to remove or replace invalid characters
          SANITIZED_DATE=$(echo "$RAW_DATE" | tr ' /:' '-')

          # 4) Export the variables to GitHub Actions
          echo "DATE=${SANITIZED_DATE}" >> $GITHUB_ENV
          echo "RAW_DATE=${RAW_DATE}" >> $GITHUB_ENV

      # Step 6.5: List Generated JSON Files
      - name: List Generated JSON Files
        run: ls -la data/

      # Step 7: Get current branch name (only for push events)
      - name: Get current branch
        if: github.event_name == 'push'
        id: get_branch
        run: echo "BRANCH_NAME=$(echo $GITHUB_REF | cut -d '/' -f 3)" >> $GITHUB_ENV

      # Step 8: Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 9: Commit changes
      - name: Commit changes
        run: |
          git add data/
          git commit -m "Add word of the day for ${{ env.RAW_DATE }}" || echo "No changes to commit."

      # Step 10a: Create Pull Request for Schedule Trigger
      - name: Create Pull Request for Schedule Trigger
        if: ${{ github.event_name == 'schedule' && env.RAW_DATE != 'Unknown Date' }}
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN with write permissions
          commit-message: "Add word of the day for ${{ env.RAW_DATE }}"
          branch: add-word-of-the-day-${{ env.DATE }}
          title: "Add word of the day for ${{ env.RAW_DATE }}"
          body: "Automatically added the word of the day for **${{ env.RAW_DATE }}**."
          base: ${{ env.HOLDING_BRANCH }}
          delete-branch: false  # Do not delete the branch if changes are added

      # Step 10b: Create Pull Request for Push or Manual Trigger
      - name: Create Pull Request for Push or Manual Trigger
        if: ${{ github.event_name != 'schedule' && env.RAW_DATE != 'Unknown Date' }}
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN with write permissions
          commit-message: "Add word of the day for ${{ env.RAW_DATE }}"
          branch: add-word-of-the-day-${{ env.DATE }}
          title: "Add word of the day for ${{ env.RAW_DATE }}"
          body: "Automatically added the word of the day for **${{ env.RAW_DATE }}**."
          base: ${{ env.BRANCH_NAME || 'main' }}
          delete-branch: true  # Delete the branch after merging

      # Step 11: Handle cases with no changes
      - name: Handle No Changes
        if: ${{ env.RAW_DATE == 'Unknown Date' }}
        run: echo "No new content found for date ${RAW_DATE}. No Pull Request was created."
