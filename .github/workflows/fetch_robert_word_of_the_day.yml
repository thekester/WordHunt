name: Fetch Robert Word of the Day

# Define required permissions
permissions:
  contents: write            # Write access to repository content
  pull-requests: write       # Write access to pull requests

on:
  schedule:
    - cron: '0 8 * * *'      # Every day at 08:00 UTC
  workflow_dispatch:         # Allows manual triggering
  push:
    branches:
      - dev
      - main

jobs:
  fetch_word:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    env:
      DATE: ''
      RAW_DATE: ''
      HOLDING_BRANCH: 'holding'
      NEW_DATA: 'false'
      BRANCH_NAME: 'main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: ${{ github.ref }}

      - name: Verify Git Branch and Status
        run: |
          echo "Current branch:"
          git branch
          echo "Git status:"
          git status

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure holding branch exists and is up-to-date
        run: |
          git fetch origin
          if ! git ls-remote --heads origin ${{ env.HOLDING_BRANCH }} | grep ${{ env.HOLDING_BRANCH }}; then
            echo "Holding branch does not exist. Creating it based on main."
            git checkout -b ${{ env.HOLDING_BRANCH }} origin/main
            git push origin ${{ env.HOLDING_BRANCH }}
          else
            echo "Holding branch exists. Fetching the latest changes."
            git checkout ${{ env.HOLDING_BRANCH }}
            git pull origin ${{ env.HOLDING_BRANCH }}
          fi
          echo "Merging main into holding to synchronize."
          git merge origin/main --no-ff -m "Synchronize holding with main" || echo "Already up to date."
          git push origin ${{ env.HOLDING_BRANCH }}

      - name: Verify Presence of Required Files
        run: |
          echo "Listing data directory:"
          ls -la data/
          echo "Listing robert directory contents:"
          ls -la robert/
          echo "Listing requirements.txt:"
          ls -la requirements.txt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Print Current Working Directory
        run: pwd

      - name: List Repository Contents
        run: ls -la

      - name: Display requirements.txt
        if: ${{ always() }}
        run: cat requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run scraping script
        id: run_scraping
        run: |
          # Run the script robert/robert.py to scrape the word of the day
          python robert/robert.py

          # Extract the date from the generated JSON files
          RAW_DATE=$(python -c "import glob, json; \
          files = sorted(glob.glob('data/robert_word_of_the_day_*.json'), reverse=True); \
          f = files[0] if files else None; \
          print(json.load(open(f, encoding='utf-8'))['date']) if f else print('Unknown Date')")

          # Remplacer les espaces, barres obliques, deux-points et virgules par des tirets
          SANITIZED_DATE=$(echo "$RAW_DATE" | tr ' /:,' '-')

          echo "DATE=${SANITIZED_DATE}" >> $GITHUB_ENV
          echo "RAW_DATE=${RAW_DATE}" >> $GITHUB_ENV

      - name: List Generated JSON Files
        run: ls -la data/

      - name: Display data directory
        run: ls -la data/

      - name: Display RAW_DATE and DATE
        run: |
          echo "RAW_DATE=${RAW_DATE}"
          echo "DATE=${DATE}"

      - name: Get current branch
        if: github.event_name == 'push'
        id: get_branch
        run: |
          CURRENT_BRANCH=$(echo $GITHUB_REF | cut -d '/' -f 3)
          echo "BRANCH_NAME=${CURRENT_BRANCH}" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git add data/
          git commit -m "Add Robert word of the day for ${{ env.RAW_DATE }}" || echo "No changes to commit."

      - name: Detect new data compared to main
        id: detect_new_data
        run: |
          git fetch origin main
          if git diff --quiet origin/main -- data/; then
            echo "No new data to push to main."
            echo "NEW_DATA=false" >> $GITHUB_ENV
          else
            echo "New data detected. Ready to push to main."
            echo "NEW_DATA=true" >> $GITHUB_ENV
          fi

      - name: Verify Token Permissions
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Personal Access Token (PAT) has insufficient permissions or is invalid."
            exit 1
          else
            echo "PAT is valid and has the necessary permissions."
          fi
        shell: bash

      - name: Create Pull Request for Schedule Trigger
        if: ${{ github.event_name == 'schedule' && env.NEW_DATA == 'true' }}
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          commit-message: "Add Robert word of the day for ${{ env.RAW_DATE }}"
          branch: add-robert-word-of-the-day-${{ env.DATE }}
          title: "Add Robert word of the day for ${{ env.RAW_DATE }}"
          body: "Automatically added the Robert word of the day for **${{ env.RAW_DATE }}**."
          base: ${{ env.HOLDING_BRANCH }}
          delete-branch: false
      
      - name: Create Pull Request for Push or Manual Trigger
        if: ${{ github.event_name != 'schedule' && env.NEW_DATA == 'true' }}
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          commit-message: "Add Robert word of the day for ${{ env.RAW_DATE }}"
          branch: add-robert-word-of-the-day-${{ env.DATE }}
          title: "Add Robert word of the day for ${{ env.RAW_DATE }}"
          body: "Automatically added the Robert word of the day for **${{ env.RAW_DATE }}**."
          base: ${{ env.HOLDING_BRANCH }}   # Mise Ã  jour ici pour utiliser la branche holding
          delete-branch: true
      
      - name: Handle No Changes
        if: ${{ env.NEW_DATA == 'false' }}
        run: echo "No new content found for date ${RAW_DATE}. No Pull Request was created."
