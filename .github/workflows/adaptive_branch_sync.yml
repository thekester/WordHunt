# File: .github/workflows/adaptive_branch_sync.yml

name: Adaptive Branch Sync

on:
  schedule:
    - cron: '0 8 * * *'    # Runs daily at 08:00 UTC (optional)
  workflow_dispatch:        # Allows manual triggering
  push:
    branches:
      - dev
      - main

jobs:
  pick_and_sync:
    runs-on: ubuntu-24.04
    
    steps:
      # 1. Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Determine which branch is most recently updated (dev vs main)
      - name: Determine which branch is more recent
        id: pick_branch
        run: |
          # Fetch the latest commits for dev and main
          git fetch origin dev main

          # Get the last commit timestamps for dev and main
          DEVMOD=$(git log -1 --format="%ct" origin/dev)
          MAINMOD=$(git log -1 --format="%ct" origin/main)

          echo "Last commit timestamp on dev  : $DEVMOD"
          echo "Last commit timestamp on main : $MAINMOD"

          # Compare the timestamps
          if [ "$DEVMOD" -gt "$MAINMOD" ]; then
            echo "Most recent branch: dev"
            echo "MOST_RECENT_BRANCH=dev" >> $GITHUB_ENV
          else
            echo "Most recent branch: main"
            echo "MOST_RECENT_BRANCH=main" >> $GITHUB_ENV
          fi

      # 4. Merge the most recent branch into holding
      - name: Sync holding branch with the chosen branch
        run: |
          # Check if the holding branch exists on the remote
          if git ls-remote --heads origin holding | grep holding; then
            echo "Remote 'holding' branch already exists."

            # Check if a local holding branch also exists
            if git rev-parse --verify holding >/dev/null 2>&1; then
              echo "Local 'holding' branch exists. Checking it out..."
              git checkout holding
            else
              echo "Local 'holding' branch does not exist. Creating it from origin/holding..."
              git checkout -b holding origin/holding
            fi

            # Pull latest changes into local holding
            git pull origin holding
          else
            echo "Remote 'holding' branch does not exist. Creating it from $MOST_RECENT_BRANCH..."
            git checkout -b holding origin/${{ env.MOST_RECENT_BRANCH }}
            git push origin holding
          fi

          echo "Merging $MOST_RECENT_BRANCH into holding..."
          git merge origin/${{ env.MOST_RECENT_BRANCH }} --no-ff -m "Synchronize holding with ${{ env.MOST_RECENT_BRANCH }}"

          echo "Pushing updated 'holding' branch to origin..."
          git push origin holding
