# File: .github/workflows/adaptive_branch_sync.yml

name: Adaptive Branch Sync

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
  push:
    branches:
      - dev
      - main

jobs:
  pick_and_sync:
    runs-on: ubuntu-24.04
    
    steps:
      # 1. Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Configure Git
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3. Determine which branch is most recently updated (dev vs main)
      - name: Determine which branch is more recent
        id: pick_branch
        run: |
          git fetch origin dev main
          DEVMOD=$(git log -1 --format="%ct" origin/dev)
          MAINMOD=$(git log -1 --format="%ct" origin/main)

          echo "Last commit timestamp on dev: $DEVMOD"
          echo "Last commit timestamp on main: $MAINMOD"

          if [ "$DEVMOD" -gt "$MAINMOD" ]; then
            echo "MOST_RECENT_BRANCH=dev" >> $GITHUB_ENV
            echo "Most recent branch is dev"
          else
            echo "MOST_RECENT_BRANCH=main" >> $GITHUB_ENV
            echo "Most recent branch is main"
          fi

      # 4. Sync the 'holding' branch
      - name: Sync holding branch with the chosen branch
        run: |
          # We'll store the chosen branch in a variable for convenience
          MRB="${MOST_RECENT_BRANCH}"

          # 1) Does 'holding' exist on the remote?
          if git ls-remote --heads origin holding | grep holding; then
            echo "Remote 'holding' branch exists."

            # 1.a) Do we have a local 'holding' branch already?
            if git rev-parse --verify holding >/dev/null 2>&1; then
              echo "Local 'holding' branch exists. Checking it out..."
              git checkout holding
              # Pull the latest commits for local holding
              git pull origin holding
            else
              echo "Local 'holding' branch does NOT exist yet. Fetching and creating it..."
              # Make sure we fetch the remote branch so we have the commit
              git fetch origin holding:refs/remotes/origin/holding
              git checkout -b holding origin/holding
            fi
          else
            echo "Remote 'holding' branch does NOT exist. Creating it from $MRB..."
            git checkout -b holding origin/$MRB
            git push origin holding
          fi

          # 2) Merge the most recent branch (dev or main) into holding
          echo "Merging $MRB into holding..."
          git fetch origin $MRB    # Ensure we have the latest from the chosen branch
          git merge origin/$MRB --no-ff -m "Synchronize holding with $MRB"

          # 3) Push any merge commits to remote holding
          git push origin holding
